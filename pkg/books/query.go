package books

import (
	"fmt"
	"strings"
)

// queryConstructor is a function that constructs a single part of the
// query generated by fn query. Each queryConstructor is responsible for
// one search parameter in SearchBy. A queryConstructor checks if its parameter
// was specified in SearchBy, if so returns true, a string to be appended
// to the SQL query,  and a list of query parameters needed for the string.
// If not, returns false and empty values.
type queryConstructor func(*SearchBy) (bool, string, queryParameters)

// queryParameters is a list of parameters to use with prepared statements,
// and is used as a return value of query builders.
type queryParameters []interface{}

// query generates a SQL select query based on fields specified in SearchBy.
// Returns a prepared statement, and a list of parameters to use with the prepared
// statement when executing. If titles is true, then select statement only selects
// books' titles.
func query(searchIn *SearchIn, searchBy *SearchBy, titles bool) (string, queryParameters) {
	queryParts := make([]string, 0)
	fields := make(queryParameters, 0)
	for _, fn := range []queryConstructor{
		titleHas,
		authors,
		languageCode,
		isbn,
		isbn13,
		ratingCeil,
		ratingFloor,
		pagesCeil,
		pagesFloor,
		ratingsCountCeil,
		ratingsCountFloor,
		reviewsCountCeil,
		reviewsCountFloor,
	} {
		ok, q, f := fn(searchBy)
		if ok {
			queryParts, fields = append(queryParts, q), append(fields, f...)
		}
	}

	return buildQuery(queryParts, searchIn, titles), fields
}

// buildQuery builds a sql select query using given a list of search string.
// If titles is true, then buildQuery returns a sql statement that selects
// titles only, otherwise a statement that selects all columns is returned.
func buildQuery(queryParts []string, searchIn *SearchIn, titles bool) string {
	builder := new(strings.Builder)

	if titles {
		builder.WriteString(fmt.Sprintf("select title from %s", searchIn.BookTable))
	} else {
		builder.WriteString(fmt.Sprintf("select * from %s", searchIn.BookTable))
	}

	if len(queryParts) != 0 {
		builder.WriteString(" where ")
		for i, field := range queryParts {
			if i != 0 {
				builder.WriteString(" and ")
			}
			builder.WriteString(field)
		}
	}

	builder.WriteByte(';')

	return builder.String()
}

// newParameters creates and returns a new queryParameters using given
// element i.
func newParameters(i interface{}) queryParameters {
	q := make(queryParameters, 1)
	q[0] = i
	return q
}

// titleHas is the queryConstructor responsible for the SearchBy.TitleHas
// parameter.
func titleHas(by *SearchBy) (bool, string, queryParameters) {
	if by.TitleHas != "" {
		return true, "title like ?", newParameters(fmt.Sprintf("%%%s%%", by.TitleHas))
	}

	return false, "", nil
}

// authors is the queryConstructor responsible for the SearchBy.Authors
// parameter.
func authors(by *SearchBy) (bool, string, queryParameters) {
	if len(by.Authors) != 0 {
		parameters := make([]interface{}, len(by.Authors))
		builder := new(strings.Builder)
		builder.WriteByte('(')

		for i, author := range by.Authors {
			parameters[i] = fmt.Sprintf("%%%s%%", author)
			if i != 0 {
				builder.WriteString(" or ")
			}
			builder.WriteString("authors like ?")
		}
		builder.WriteByte(')')

		return true, builder.String(), parameters
	}

	return false, "", nil
}

// languageCode is the queryConstructor responsible for the
// SearchBy.LanguageCode parameter.
func languageCode(by *SearchBy) (bool, string, queryParameters) {
	if len(by.LanguageCode) != 0 {
		parameters := make([]interface{}, len(by.LanguageCode))
		builder := new(strings.Builder)
		builder.WriteByte('(')

		for i, code := range by.LanguageCode {
			parameters[i] = fmt.Sprintf("%%%s%%", code)

			if i != 0 {
				builder.WriteString(" or ")
			}
			builder.WriteString("languageCode like ?")
		}
		builder.WriteByte(')')

		return true, builder.String(), parameters
	}

	return false, "", nil
}

// isbn is the queryConstructor responsible for the SearchBy.ISBN
// parameter.
func isbn(by *SearchBy) (bool, string, queryParameters) {
	if by.ISBN != "" {
		return true, "isbn = ?", newParameters(by.ISBN)
	}

	return false, "", nil
}

// isbn13 is the queryConstructor responsible for the SearchBy.ISBN13
// parameter.
func isbn13(by *SearchBy) (bool, string, queryParameters) {
	if by.ISBN13 != "" {
		return true, "isbn13 = ?", newParameters(by.ISBN13)
	}

	return false, "", nil
}

// ratingCeil is the queryConstructor responsible for the SearchBy.RatingCeil
// parameter.
func ratingCeil(by *SearchBy) (bool, string, queryParameters) {
	if by.RatingCeil >= 0 {
		return true, "averageRating <= ?", newParameters(by.RatingCeil)
	}

	return false, "", nil
}

// ratingFloor is the queryConstructor responsible for the SearchBy.RatingFloor
// parameter.
func ratingFloor(by *SearchBy) (bool, string, queryParameters) {
	if by.RatingFloor >= 0 {
		return true, "averageRating > ?", newParameters(by.RatingFloor)
	}

	return false, "", nil
}

// pagesCeil is the queryConstructor responsible for the SearchBy.PagesCeil
// parameter.
func pagesCeil(by *SearchBy) (bool, string, queryParameters) {
	if by.PagesCeil >= 0 {
		return true, "pages <= ?", newParameters(by.PagesCeil)
	}

	return false, "", nil
}

// pagesFloor is the queryConstructor responsible for the SearchBy.PagesFloor
// parameter.
func pagesFloor(by *SearchBy) (bool, string, queryParameters) {
	if by.PagesFloor >= 0 {
		return true, "pages > ?", newParameters(by.PagesFloor)
	}

	return false, "", nil
}

// ratingsCountCeil is the queryConstructor responsible for the
// SearchBy.RatingsCountCeil parameter.
func ratingsCountCeil(by *SearchBy) (bool, string, queryParameters) {
	if by.RatingsCountCeil >= 0 {
		return true, "ratingsCount <= ?", newParameters(by.RatingsCountCeil)
	}

	return false, "", nil
}

// ratingsCountFloor is the queryConstructor responsible for the
// SearchBy.RatingsCountFloor parameter.
func ratingsCountFloor(by *SearchBy) (bool, string, queryParameters) {
	if by.RatingsCountFloor >= 0 {
		return true, "ratingsCount > ?", newParameters(by.RatingsCountFloor)
	}

	return false, "", nil
}

// reviewsCountCeil is the queryConstructor responsible for the
// SearchBy.ReviewsCountCeil parameter.
func reviewsCountCeil(by *SearchBy) (bool, string, queryParameters) {
	if by.ReviewsCountCeil >= 0 {
		return true, "reviewsCount <= ?", newParameters(by.ReviewsCountCeil)
	}

	return false, "", nil
}

// reviewsCountFloor is the queryConstructor responsible for the
// SearchBy.reviewsCountFloor parameter.
func reviewsCountFloor(by *SearchBy) (bool, string, queryParameters) {
	if by.ReviewsCountFloor >= 0 {
		return true, "reviewsCount > ?", newParameters(by.ReviewsCountFloor)
	}

	return false, "", nil
}
